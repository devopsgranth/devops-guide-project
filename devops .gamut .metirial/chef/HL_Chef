		Chef - configuration management tool
	=============================================
# What is Chef
	- Chef is an automation platform that configures and
	  manages the infrastructure.
	  
	- Manually built infrastructure becomes hard to 
	  understand and modify. People tend to fear for 
	  implementing a change.
			  
	- Chef helps us to handle changes or change management
	  in a systematic fashion efficiently. so we can 
	  ensure that a system is configured in a correct and 
	  reliable manner.
	
	- When servers are build manually, it's not easy
	  to build them from scratch. Using Chef, Servers can 
	  be reproduced easily.

	- Enables infrastrucute as a code.
	
	- Chef can automatically detect the faults and repair 
	  them.
	  
	  
ChefDK Installation:
===================
1. Download Chef Development Kit (Chefdk)
	chefdk_1.3.43-1_amd64.deb

2. Install the debian package using
	sudo dpkg -i chefdk_1.3.43-1_amd64.deb

3. Verify the installation
	$ which ruby
		/usr/bin/ruby
	$ which chef
		/usr/bin/chef
	$ which chef-client 
		/usr/bin/chef-client

Chefdk uninstallation:
========================
dpkg --list |grep chefdk
sudo dpkg -P chefdk

Chef Syntax:
============
#
- By convention, files that contain chef code have the extension .rb
- The chef coding language is Ruby DSL. Ruby DSL is just a
	subset of Ruby.
- Using DSL, you just specify "WHAT" disired configuration of a machine should be; rather than "HOW" it should be accomplished.
	
Recipe Syntax:
===============
	resource 'NAME' do
	    parameter1 value1
	    attibute   value2
	end

# Simplest form of Chef code.

	file 'build_status' do
		content 'build and deployment is succusful!'
	end
	
	--> file - is called a Resource. The file resource
		is used to manage a file on a computer. 
	--> build_status - name_attribute for that resource.
	--> It can be a single quote or double.
	--> do - is a clause, denotes the start of a block.
	--> content - called attribute or called parameter to
		the resource file.
	--> end - do..end pair is called block.
	--> indentation - two spaces.

What is Resource: Resources are building blocks used to define specific parts of infra.Resource defines actions for Chef to perform.
		
# Chef Concept: Tell WHAT, Not HOW.

	Resource+Attributes=Recipe --> Chef:
							   WHAT do I care about?
										|
							   Decide HOW & Perform Actions

- Chef refers recipe and decides how to put the machine in
	desired configuration by reasoning about the current
	state of the system. As opposed to shell/any scripting
	you just specify what not how.
- are you a sharp-eye reader? wonder how it handles for windows? Chef Handles windows and Linux specifics if any.
Chef used powerShell for windows.

# Change system configuration to match what the recipe specifies.
You just specify what is your desired configuration. Chef
takes care of all the rest automatically.

# Roll back : tell Chef what not to do.
file "#{ENV['HOME']}/build_status" do
	  action :delete
	end 
- :delete is called a symbol.

#
Let's go complex: :-)
	file "#{ENV['HOME']}/build_status" do
	  content 'build and deployment is succusful!'
	end
	- END['name'] - retrive system environment variable	
	- Use double quotes for string interpoation.

# Conclusion:
	Recipe: Recipes Spcify desired configuration for your computer which is in QA or PROD.
	Resource: 
	Attribute
	
# What Next? Creat a sandbox environment using Docker
so that you have a safe place to experiment.

# Setting up sandbox environment with Docker.

Chef and Docker Integration:
============================
	- Untested Chef code might make unintended configurational changes to your local development environment.
	- Most of the times, we want to deploy chef code to sandbox environments that closely simulate a prod environment.
	- It's not a good idea to run your experimented code directly in production before testing it in your sandbox env.

# Commonly used Chef resources


#
Chef production environment:
===================
Chef Architecture:
	workstation
	chef server
	node
	knife
=============
workstation: is the computer(typically your machine) where you write your cookbooks and administer your network.

Chef server: Central repository that contains the cookbooks you write and information about every node it manages.

Node: is a computer that is managed by a chef server. ex: computer in your QA/Prod environments.

Knife:  Knife command enables us to communicate with Chef 
		server from workstation.
		Knife is an interface between your workstation and 
		Chef server.
		Using knife, we can upload cookbooks to the server,
		and work with node.

Hosted Chef server setup:
============================
1. Sign up for hosted Chef 
2. Create an organization

Work station Setup:
======================
1. create a project directory "gamut/.chef"
2. configure knife to talk to Chef server
	knife requires two files to talk to the Chef server
		a. an RSA private key: 
		b. knife configuration file/knife.rb
	Generate these two files from hosted Chef and place 
	under .chef directory.
	
	Generate knife.rb: Administration--> click on organization-->generate knife config
	Generate RSA key: Administration--> Users --> click on your Username --> Reset key

3. Validate Chef server conection from workstation:
	$ knife ssl check

Write Cookbook:
================
1. git clone https://github.com/learn-chef/learn_chef_apache2.git

Upload your cookbook:
knife cookbook upload learn_chef_apache2
knife cookbook list

Bring up the Ubuntu Node:
================================
- Write a Dockerfile to create a docker node:
		- service ssh start
		- change the password
		- add gamut to sudoers list

Bootstrap the node:
====
- The bootstrap process connects to your node over SSH.

knife bootstrap 172.17.0.2 --ssh-user gamut --ssh-password 'gamut' --sudo --use-sudo-password --node-name gamut --run-list 'recipe[learn_chef_apache2]' 

- Bootstrap installs chef-client in node and associates it to the Chef server. to verify..
	$ knife node list
 	$ knife node show gamut (view data about the node)

- Bootstrap also downloaded the latest cookbooks and executed it.

TEST: Apache
		curl curl 172.17.0.2
		http://172.17.0.2






















scribbles:
==========
#
Configuration management tool(Chef) advantages:
	- Consistency:
		If manual, can't make sure that a change
		or system is configured/implemented with
		compliance and security standards.
	- Efficient change management:
		- Manually build infrastructure becomes hard to
		  understand and modify.
		- In manually build infrastructure, people tend to
		fear for implementing a change
		- Servers can be reproduced easily.
	- Simpliciry in rebuild:
		- when servers are build manually, it's not easy
		  to build them from scratch. With Chef, we can 
		  quickly restore the services.

