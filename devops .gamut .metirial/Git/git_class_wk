Day-1
======
# What is VCS. Why we need VCS.
	VCS features.
	
#
GIT Installation (Ubuntu):
	- sudo apt-get update
	- sudo apt-get install git

Verify Installation:
	which git
	git --version 

Remove Git Installation:
	sudo apt-get remove git

#
Git Architecture Diagram
	- Centralized
	- Distributed
	- Local
	- Git features over other VCS

#
diff between centralized and distributed.


Day-2
========
#
create a directory called WD.
mkdir WD

#
Cloning an existing Repository:
	git clone https://github.com/nageshvkn/gmail.git

Note: Create a remote repository in www.github.com if you don't have one.

#
cd gmail
ls -a (observe the .git  folder)

#
create some source code ex: Login.java

# Stage your changes
git add Login.java

# Commit your changes to local repository
git commit Login.java -m "created login module code"

# Push your changes to remote repository
git push




# Git - The Distributed Version Control System
	Local Repository - .git

# First commit, Commit History
	Git add
	git commit
	git push
	
	git log
		- Git log provides username, sha, timstamp 
		  and commit message.
#
Setting up mandatory configurations:
=============================================
$ git config --global user.name "Nageswara Rao P"

$ git config --global user.email "nageshvkn@gmail.com"
$ git config --global core.editor "vim"

#
Check the configurations using below command
$ git config --list

# Git config file
$USER_HOME/.gitconfig file

# Two Tree architecture
  Three Tree architecture

# Understand Git Jargon.
	- Remote Repository
	- Working Directory
	- Local Repository
	- Master Branch
	- Stage/Stagin Index

#
STAGE

Day-3
=======
# Create a remote repository

#Setting up Local repository
1. create/initialize a local repository with 'git init' command
$ git init gamutkart

2. Observe the local repository
ls -a (you can see the .git folder. this is called the "local repository")

3.
create some source code.. ex: vim Login.java .. add some content

4.
Adding the file to STAGE.
$ git add Login.java

5.
Commiting the file to local repository
$ git commit Login.java -m "lgoin module code"

6.
Check the log of Login.java using log command.
$ git log Login.java


# Revisit Git work-flow

# History - Deep Dive
	$ git log Login.java


	Options:
		- git log <filename>
		- git log -n2
		- git log --author="nageshvkn"
		- git log --since="2016/12/13"(hour:min)
		- git log --until="2016/12/13"
		- git log --grep="DB code"		
		- git log --oneline
		- Combination

#
SHA-1 Checksum commit Id

Day-4
=====
# GIT Commands
1. 
git diff Login.java

2.
git diff --staged Login.java

3.
git diff --color-words Login.java


4. Deleting a file

	A.) git rm OMS.java
	    git commit OMS.java -m "comment"
	   
	B.) rm -rf Order.java
		git add Order.java
		git commit Order.java -m "manualy remove"

	
5. Renaming a file/folder
	A.) git mv Login.java Login1.java
		git commit
		
	B.) mv Login.java LoginWeb.java
		git status
		git add Login.java LoginWeb.java
		git commit -m "renamed login file"
		
#
Carry the history
	- git log --follow Login.java

Day-5
=======
# BRANCHING
	A. What is a branch?	
	B. Why and When we create a branch?
	C. Branching Stratogy overview(Single branching model)
	
# List all the branches
	$ git branch
		
# Creating a new branch
	$ git branch dev_1.2.3
		
# Switching from one branch to another
	$ git checkout dev_1.2.3
		
# Creating and switching to a newly created branch
	$ git checkout -b dev_1.2.4

# Verify the commits in multiple branches


Day-6
======
# Revisioning and HEAD
	HEAD pointer
	HEAD Information  [.git/HEAD]
	HEAD transition [after checkout]
	
# Skip staging
	git commit -am "submit all pending changes"
		
Caveats: it will commit everything whatever is pending.. what if you don’t want to submit few files?

#
undoing changes:
undo/revert local changes from source area-->
	git checkout -- LoginWeb.java

undo/revert/unstage the changes from STAGE area-->
	git reset HEAD LoginWeb.java

#
git show <SHA>
 2344abc




#remove a change permanently from git repo
# how to restore previous version cahnges in git


#
see thediff between to commited revisions

Day:7
======
#
Igonring files:
	.gitignore
	regular expressions *, [0-9], !negation
	Ignore dirctory (classes/)
	Typical ignores: compiled code, packages & compressed files, OS generated files(.DS_Store, thumbs.db), logs, images, videos..etc.

#
git remote
	PULL
	FETCH
	PUSH


NOTE: How to see the extra changes which are fetched? 
	git log origin/master ^master

#
Branching stratogies		


NOTES:
SVN & Git differences:
==========================
1.
SVN is a centralised version control system. In svn when a user checkout’s the repository
he will get only the source code. that means multiple users connect to a single/centralized server. If that server goes down, no user will be able to work(most of the work). 

	Where as Git is distributed VCS. In the sense, when user clones the repository, he will get source code as well as complete repository on his local disk. since repository is distributed across multiple users and each user has a local repository, user will be able to submit the changes locally without connecting to the master server. (i.e he can also work offline)

2.
Git has staging area. Users can leverage this staging area to stage/save all the changes related to some issue/bug and  commit everything at once into local repository. hence, all the changes will be recorded as part of single sha/commit. user's get an opportunity to logically group the changes and commit as single changeset. this enables better tracking.

3.
Since git is distributed in nature, almost all transactions happen locally in the client machine and hence less overhead on the server so git is faster. Users are free to create any no. branches in Git. where as in svn all branches reside in server side, so may cause svn to be overloaded with multiple requests.

4.
Git seems to be good with merging.

5.
Git stores each change as SHA values unlike svn’s revisions.





















Merging:
=========
# FAST-FORWARD MERGE

BEFORE MERGE:
		master
		|
----C1----C2---C3
		|
		------C4----C5
			    |
			    dev_1.2.3
Excercise:
===========
git branch
git branch dev_1.2.3
git commit (just to have C4 & C5)

git checkout master
git merge dev_1.2.3


AFTER MERGE:

 			     master
			     |
----C1----C2---C3------C4----C5
		             |
			     dev_1.2.3


MERGE COMMIT / MERGING CONFLICT:
===============================
#
Merge:
git checkout master
git merge dev_1.2.3

#
Resolve Conflict: 
- open the conflict file-->remove conflict markers-->select 
  the right content.
- git add
- git commit


Branch Management:
==========
# see last commit on each branch
git branch -v

#
git branch --merged

#
git branch --no-merged

# Remove branch after the merge
git branch -d dev_1.2.3



REBASE:
===========
Rebase: Take a patch of all changes from one branch and apply them on another one.

source : experiment

--------master
    |
    --------dev_12_4


git checkout master
git rebase dev_12_4


git log --decorate --oneline --graph









Tagging:
==========
	- lightweight tag
	- annotated tag

- A lightweight tag is very much like a branch that doesn’t change – it’s just a pointer to a specific commit.

- annotated tag contains:
	tagger name
	email
	date
	tagging message
#
git tag
git tag -l 'v1.8.5*'

# create an Annotated Tag:
	git tag -a dev_1.2.3_tag -m "release 1.2.3"

#
see tag information
	git show dev_1.2.3_tag
	
# Create a Lightweight Tags
	git tag dev_1.2.4_tag

# No tag info
	git show dev_1.2.4_tag

# Tagging Later
	git tag -a v1.2 9fceb02 -m "tag at prev commit"

SHARING TAGS:
=============
git push command doesn't transfer tags to remote servers.

# push a tag
git push origin v1.5_tag

# push all tags at once
git push origin --tags


CHECKOUT A TAG:
=================
You can’t really check out a tag in Git, since they can’t be moved around.
If you want to get the source from a tag, create a branch at that specific tag.

$ git checkout -b version2 v2.0.0


GIT ALIASES:
==============
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit

git config --global alias.unstage 'reset HEAD --'
	git unstage fileA
	git reset HEAD fileA



Questions:
=============
Revert a commited change
